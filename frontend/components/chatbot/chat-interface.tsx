"use client";

import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Loader2, Heart, AlertTriangle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { chatbotAPI, validateHealthQuery, detectEmergencyKeywords, getHealthSuggestions } from '@/lib/api/chatbot';

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'bot';
  timestamp: Date;
  type?: 'text' | 'suggestion' | 'knowledge';
  metadata?: {
    disease?: string;
    symptoms?: string[];
    confidence?: number;
    sources?: string[];
  };
}

interface ChatInterfaceProps {
  className?: string;
}

const healthSuggestions = getHealthSuggestions().slice(0, 5);

export function ChatInterface({ className }: ChatInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: 'Xin ch√†o! T√¥i l√† AI Health Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t∆∞ v·∫•n y t·∫ø, tra c·ª©u th√¥ng tin b·ªánh l√Ω, v√† h∆∞·ªõng d·∫´n chƒÉm s√≥c s·ª©c kh·ªèe. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      sender: 'bot',
      timestamp: new Date(),
      type: 'text'
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [apiStatus, setApiStatus] = useState<'online' | 'offline' | 'checking'>('checking');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Check API status on mount
  useEffect(() => {
    checkAPIStatus();
  }, []);

  const checkAPIStatus = async () => {
    try {
      await chatbotAPI.healthCheck();
      setApiStatus('online');
    } catch (error) {
      setApiStatus('offline');
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (content: string) => {
    if (!content.trim() || isLoading) return;

    // Validate input
    const validation = validateHealthQuery(content);
    if (!validation.isValid) {
      // Show validation error as bot message
      const errorMessage: Message = {
        id: Date.now().toString(),
        content: validation.message || 'C√¢u h·ªèi kh√¥ng h·ª£p l·ªá',
        sender: 'bot',
        timestamp: new Date(),
        type: 'text'
      };
      setMessages(prev => [...prev, errorMessage]);
      return;
    }

    // Check for emergency keywords
    if (detectEmergencyKeywords(content)) {
      const userMessage: Message = {
        id: Date.now().toString(),
        content: content.trim(),
        sender: 'user',
        timestamp: new Date(),
        type: 'text'
      };

      const emergencyMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: `üö® **C·∫¢NH B√ÅO KH·∫®N C·∫§P** üö®

T√¥i ph√°t hi·ªán c√¢u h·ªèi c·ªßa b·∫°n c√≥ th·ªÉ li√™n quan ƒë·∫øn t√¨nh hu·ªëng kh·∫©n c·∫•p. 

**H√ÄNH ƒê·ªòNG NGAY:**
‚Ä¢ **G·ªçi 115** (C·∫•p c·ª©u) ho·∫∑c ƒë·∫øn b·ªánh vi·ªán g·∫ßn nh·∫•t
‚Ä¢ **G·ªçi 114** (Th√¥ng tin y t·∫ø) ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n
‚Ä¢ **Li√™n h·ªá b√°c sƒ©** n·∫øu c√≥ th·ªÉ

**Th√¥ng tin tham kh·∫£o:**
${simulateHealthResponse(content)}

‚ö†Ô∏è **L·ªúI KHUY√äN:** Trong t√¨nh hu·ªëng kh·∫©n c·∫•p, ƒë·ª´ng ch·ªù ƒë·ª£i. H√£y t√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° y t·∫ø ngay l·∫≠p t·ª©c!`,
        sender: 'bot',
        timestamp: new Date(),
        type: 'text'
      };

      setMessages(prev => [...prev, userMessage, emergencyMessage]);
      setInputValue('');
      return;
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      content: content.trim(),
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);

    try {
      // Create conversation if not exists
      if (!conversationId) {
        const newConversation = await chatbotAPI.createConversation();
        setConversationId(newConversation.conversation_id);
      }

      // Call chatbot API
      const response = await chatbotAPI.sendMessage({
        message: content,
        conversation_id: conversationId,
      });
      
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: response.response || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.',
        sender: 'bot',
        timestamp: new Date(),
        type: response.type || 'text',
        metadata: response.metadata
      };

      setMessages(prev => [...prev, botMessage]);
      setApiStatus('online');
    } catch (error) {
      console.error('Error sending message:', error);
      setApiStatus('offline');
      
      // Fallback response with knowledge base simulation
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: `‚ö†Ô∏è **K·∫øt n·ªëi API g·∫∑p s·ª± c·ªë** - ƒêang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô ngo·∫°i tuy·∫øn

${simulateHealthResponse(content)}

üí° **L∆∞u √Ω:** ƒê√¢y l√† ph·∫£n h·ªìi m√¥ ph·ªèng. H√£y th·ª≠ l·∫°i sau khi k·∫øt n·ªëi ·ªïn ƒë·ªãnh ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c h∆°n.`,
        sender: 'bot',
        timestamp: new Date(),
        type: 'knowledge'
      };

      setMessages(prev => [...prev, botMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const simulateHealthResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('ƒëau ƒë·∫ßu') || message.includes('s·ªët')) {
      return `D·ª±a tr√™n tri·ªáu ch·ª©ng b·∫°n m√¥ t·∫£ (ƒëau ƒë·∫ßu v√† s·ªët), ƒë√¢y c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa:

**C√°c nguy√™n nh√¢n c√≥ th·ªÉ:**
‚Ä¢ C·∫£m c√∫m ho·∫∑c nhi·ªÖm tr√πng virus
‚Ä¢ Nhi·ªÖm tr√πng ƒë∆∞·ªùng h√¥ h·∫•p
‚Ä¢ CƒÉng th·∫≥ng, m·ªát m·ªèi
‚Ä¢ Thi·∫øu n∆∞·ªõc

**Khuy·∫øn ngh·ªã:**
‚Ä¢ Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß
‚Ä¢ U·ªëng nhi·ªÅu n∆∞·ªõc
‚Ä¢ C√≥ th·ªÉ d√πng paracetamol gi·∫£m ƒëau
‚Ä¢ N·∫øu s·ªët >39¬∞C ho·∫∑c k√©o d√†i >3 ng√†y, h√£y ƒë·∫øn kh√°m b√°c sƒ©

‚ö†Ô∏è **L∆∞u √Ω:** ƒê√¢y ch·ªâ l√† th√¥ng tin tham kh·∫£o, kh√¥ng thay th·∫ø vi·ªác kh√°m b√°c sƒ©.`;
    }
    
    if (message.includes('c·∫£m c√∫m') || message.includes('ph√≤ng ng·ª´a')) {
      return `**C√°ch ph√≤ng ng·ª´a c·∫£m c√∫m hi·ªáu qu·∫£:**

üõ°Ô∏è **Ph√≤ng ng·ª´a c∆° b·∫£n:**
‚Ä¢ R·ª≠a tay th∆∞·ªùng xuy√™n v·ªõi x√† ph√≤ng
‚Ä¢ ƒêeo kh·∫©u trang n∆°i ƒë√¥ng ng∆∞·ªùi
‚Ä¢ Tr√°nh ti·∫øp x√∫c g·∫ßn v·ªõi ng∆∞·ªùi b·ªánh
‚Ä¢ Kh√¥ng ch·∫°m tay v√†o m·∫∑t

üíâ **Ti√™m vaccine:**
‚Ä¢ Ti√™m vaccine c√∫m h√†ng nƒÉm
‚Ä¢ ƒê·∫∑c bi·ªát quan tr·ªçng v·ªõi ng∆∞·ªùi cao tu·ªïi, tr·∫ª em

üèãÔ∏è **TƒÉng c∆∞·ªùng s·ª©c ƒë·ªÅ kh√°ng:**
‚Ä¢ ƒÇn ƒë·ªß ch·∫•t dinh d∆∞·ª°ng
‚Ä¢ T·∫≠p th·ªÉ d·ª•c ƒë·ªÅu ƒë·∫∑n
‚Ä¢ Ng·ªß ƒë·ªß gi·∫•c (7-8 ti·∫øng/ƒë√™m)
‚Ä¢ Gi·∫£m stress`;
    }
    
    if (message.includes('paracetamol') || message.includes('thu·ªëc')) {
      return `**Th√¥ng tin v·ªÅ Paracetamol:**

üíä **C√¥ng d·ª•ng:**
‚Ä¢ Gi·∫£m ƒëau, h·∫° s·ªët
‚Ä¢ An to√†n cho h·∫ßu h·∫øt m·ªçi ng∆∞·ªùi

‚ö†Ô∏è **T√°c d·ª•ng ph·ª•:**
‚Ä¢ Hi·∫øm g·∫∑p khi d√πng ƒë√∫ng li·ªÅu
‚Ä¢ T·ªïn th∆∞∆°ng gan n·∫øu qu√° li·ªÅu
‚Ä¢ D·ªã ·ª©ng (hi·∫øm)

üìã **Li·ªÅu d√πng:**
‚Ä¢ Ng∆∞·ªùi l·ªõn: 500-1000mg/l·∫ßn, t·ªëi ƒëa 4g/ng√†y
‚Ä¢ Tr·∫ª em: theo c√¢n n·∫∑ng (10-15mg/kg/l·∫ßn)

‚ùå **Ch·ªëng ch·ªâ ƒë·ªãnh:**
‚Ä¢ Suy gan n·∫∑ng
‚Ä¢ D·ªã ·ª©ng v·ªõi paracetamol
‚Ä¢ U·ªëng nhi·ªÅu r∆∞·ª£u bia`;
    }
    
    return `C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t c√¢u h·ªèi. T√¥i ƒëang h·ªçc h·ªèi th√™m ƒë·ªÉ c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·ªët h∆°n v·ªÅ v·∫•n ƒë·ªÅ n√†y. 

Trong th·ªùi gian ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ:
‚Ä¢ Tham kh·∫£o th√¥ng tin t·ª´ c√°c ngu·ªìn y t·∫ø uy t√≠n
‚Ä¢ Li√™n h·ªá v·ªõi b√°c sƒ© n·∫øu c·∫ßn t∆∞ v·∫•n c·ª• th·ªÉ
‚Ä¢ Th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c m√† t√¥i c√≥ th·ªÉ h·ªó tr·ª£

T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ: tri·ªáu ch·ª©ng b·ªánh, ph√≤ng ng·ª´a, th√¥ng tin thu·ªëc, ch·∫ø ƒë·ªô dinh d∆∞·ª°ng, v√† nhi·ªÅu ch·ªß ƒë·ªÅ s·ª©c kh·ªèe kh√°c.`;
  };

  const handleSuggestionClick = (suggestion: string) => {
    sendMessage(suggestion);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendMessage(inputValue);
  };

  const formatTimestamp = (timestamp: Date) => {
    return timestamp.toLocaleTimeString('vi-VN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <div className={`flex flex-col h-full ${className}`}>
      {/* Chat Header */}
      <Card className="rounded-none border-x-0 border-t-0">
        <CardHeader className="pb-3">
          <CardTitle className="flex items-center gap-2">
            <div className="p-2 bg-blue-100 rounded-full">
              <Heart className="w-5 h-5 text-blue-600" />
            </div>
            AI Health Assistant
            <Badge 
              variant="secondary" 
              className={`ml-auto ${apiStatus === 'online' ? 'bg-green-100 text-green-800' : apiStatus === 'offline' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'}`}
            >
              {apiStatus === 'online' ? 'Online' : apiStatus === 'offline' ? 'Offline' : 'Checking...'}
            </Badge>
          </CardTitle>
        </CardHeader>
      </Card>

      {/* Messages Area */}
      <div className="flex-1 overflow-hidden">
        <ScrollArea className="h-full p-4">
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex items-start gap-3 ${
                  message.sender === 'user' ? 'flex-row-reverse' : ''
                }`}
              >
                <Avatar className="w-8 h-8">
                  <AvatarFallback className={
                    message.sender === 'user' 
                      ? 'bg-blue-100 text-blue-600' 
                      : 'bg-green-100 text-green-600'
                  }>
                    {message.sender === 'user' ? <User className="w-4 h-4" /> : <Bot className="w-4 h-4" />}
                  </AvatarFallback>
                </Avatar>
                
                <div className={`flex flex-col ${message.sender === 'user' ? 'items-end' : 'items-start'} flex-1 max-w-[80%]`}>
                  <div
                    className={`p-3 rounded-lg ${
                      message.sender === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-800'
                    }`}
                  >
                    <div className="whitespace-pre-wrap text-sm">
                      {message.content}
                    </div>
                    {message.metadata && (
                      <div className="mt-2 pt-2 border-t border-gray-200 text-xs">
                        {message.metadata.confidence && (
                          <div>ƒê·ªô tin c·∫≠y: {Math.round(message.metadata.confidence * 100)}%</div>
                        )}
                        {message.metadata.sources && (
                          <div>Ngu·ªìn: {message.metadata.sources.join(', ')}</div>
                        )}
                      </div>
                    )}
                  </div>
                  <span className="text-xs text-gray-500 mt-1">
                    {formatTimestamp(message.timestamp)}
                  </span>
                </div>
              </div>
            ))}
            
            {isLoading && (
              <div className="flex items-start gap-3">
                <Avatar className="w-8 h-8">
                  <AvatarFallback className="bg-green-100 text-green-600">
                    <Bot className="w-4 h-4" />
                  </AvatarFallback>
                </Avatar>
                <div className="bg-gray-100 p-3 rounded-lg">
                  <div className="flex items-center gap-2">
                    <Loader2 className="w-4 h-4 animate-spin" />
                    <span className="text-sm text-gray-600">ƒêang suy nghƒ©...</span>
                  </div>
                </div>
              </div>
            )}
          </div>
          <div ref={messagesEndRef} />
        </ScrollArea>
      </div>

      {/* Suggestions */}
      {messages.length === 1 && (
        <div className="p-4 border-t bg-gray-50">
          <div className="mb-2 text-sm font-medium text-gray-700">
            C√¢u h·ªèi g·ª£i √Ω:
          </div>
          <div className="flex flex-wrap gap-2">
            {healthSuggestions.map((suggestion, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                onClick={() => handleSuggestionClick(suggestion)}
                className="text-xs hover:bg-blue-50 hover:border-blue-200"
              >
                {suggestion}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Input Area */}
      <Card className="rounded-none border-x-0 border-b-0">
        <CardContent className="p-4">
          <form onSubmit={handleSubmit} className="flex gap-2">
            <Input
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Nh·∫≠p c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe..."
              disabled={isLoading}
              className="flex-1"
            />
            <Button 
              type="submit" 
              disabled={isLoading || !inputValue.trim()}
              size="icon"
            >
              {isLoading ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Send className="w-4 h-4" />
              )}
            </Button>
          </form>
          <div className="mt-2 text-xs text-gray-500">
            üí° Tip: M√¥ t·∫£ tri·ªáu ch·ª©ng c·ª• th·ªÉ ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c h∆°n
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
